# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


class Solution:
    def sortedListToBST(self, head):

        # Problem:
        # Given the head of a singly linked list where elements are
        # sorted in ascending order, convert it to a height balanced BST.
        # For this problem, a height-balanced binary tree is defined as
        # a binary tree in which the depth of the two subtrees of every
        # node never differ by more than 1.

        # Strategy:
        # We can use a red-black tree to deal with height balancing
        # while introducing new nodes into the tree.
        # In our case, we will use the quick and dirty approach: turn
        # the linked list of nodes into a normal python list. Then we
        # will recursively build a tree starting from the root.

        # A typical recursive tree building method.
        def build(sorted_list, l_start, r_stop):

            # Termination condition: If the start index is greater than the
            # stop index, return nullptr (leaf) node.
            if l_start > r_stop:
                return None

            # Find the midpoint between l_start and r_stop. We will take
            # the value from sorted_list at this index.
            mid = (l_start + r_stop) // 2

            # Initialize a TreeNode with the value at index mid.
            root = TreeNode(sorted_list[mid])

            # Recursively call build to generate the left subtree.
            root.left = build(sorted_list, l_start, mid-1)

            # Recursively call build to generate the right subtree.
            root.right = build(sorted_list, mid+1, r_stop)

            return root

        # Convert linked list to a common python list.
        sorted_list = []
        while head is not None:
            sorted_list.append(head.val)
            head = head.next

        # Return the tree generated by the build method.
        return build(sorted_list, 0, len(sorted_list)-1)


h = ListNode(-10)
# h.next = ListNode(-3)
# h.next.next = ListNode(0)
# h.next.next.next = ListNode(5)
# h.next.next.next.next = ListNode(9)
sol = Solution().sortedListToBST(h)
print()
